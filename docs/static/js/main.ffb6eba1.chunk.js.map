{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/RemoveCategory.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","className","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","RemoveCategory","onClick","newCategories","filter","item","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGif","key","GifExpertApp","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffb6eba1.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState('');\n    \n    const handleInputChange = (e) =>{\n        //console.log(e.target.value);\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        //console.log('console log hecho desde el form');\n        if(inputValue.trim().length>2){\n            setCategories( categories => [inputValue, ...categories]);\n            setInputValue('');\n        }\n\n    };\n\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <span className=\"input-group col-md-8 col-lg-10\">\n                <input \n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                    className=\"form-control\"\n                />\n                <button className=\"btn btn-secondary\"><span className=\"fa fa-search\"></span></button>\n            </span>\n        </form>\n    )\n}\n\nAddCategory.propTypes={\n    setCategories: PropTypes.func.isRequired\n};","export const getGifs = async( category) =>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=12&api_key=8k5mmt49hVm04O9wCVI3GE3P8od30Zem`;\n    const respuesta = await fetch(url);\n    const {data} = await respuesta.json();\n\n    const gifs = data.map(img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    \n    //console.log(gifs);\n    return gifs;\n};","import React from 'react';\n//import {FullScreen} from './FullScreen';\n\nexport const GifGridItem = ({id, title, url}) => {\n    return (\n        <div className=\"col-md-6 col-lg-3 espaciado\">\n            <div className='card animate__animated animate__fadeIn animate__delay-2s'>\n                <img src={url} alt={title} className=\"card-img-top\"/>\n                <div className=\"card-body\">\n                    <p className=\"card-text\">Tag: {title}</p>\n                    <div className=\"text-right\">\n                    </div>\n                </div>\n            </div>\n        </div>    \n    )\n}\n","import React from 'react'\n\nexport const RemoveCategory = ({category, categories, setCategories}) => {\n\n    const handleRemoveCategory = () =>{\n        //console.log(category);\n        const newCategories = categories.filter(item => item !== category);\n        //console.log(newCategories);\n        setCategories( () => [...newCategories]);\n    };\n\n    return (\n        <>\n            <button className=\"close\" onClick={handleRemoveCategory}>\n                <span className=\"fa fa-times\"></span>\n            </button>\n        </>\n    )\n}\n","import React, { /*useState, useEffect*/ } from 'react'\nimport { useFetchGif } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\nimport { RemoveCategory } from './RemoveCategory';\n//import { getGifs } from '../helpers/getGif';\n\nexport const GifGrid = ({category, categories, setCategories}) => {\n\n    const { data: images, loading } = useFetchGif( category );\n    //console.log(state);\n    //const [images, setimages] = useState([]);\n    \n    //useEffect(() => {\n    //    getGifs(category)\n    //        .then(imgs => setimages(imgs));\n    //}, [ category ]); //Solo se ejecuta ese codigo cuando el componente es renderizado por primera vez = []. Permite que se vuelva a cargar si cambia el contenido de [category] \n\n    //getGifs(); //Sin useEffect vuelve a realizar la peticion cada que recarga el componente.\n    \n    return (\n        <div className=\"card espaciado\">\n            <div className=\"card-header\">\n                <span className=\"card-title animate__animated animate__fadeIn animate__delay-1s\">{category}</span>\n                <RemoveCategory category={category} categories={categories} setCategories={setCategories} />\n            </div>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n            \n            <div className=\"card-body card-grid\">\n                    {\n                        images.map(img => (\n\n                            <GifGridItem \n                                key={img.id}   \n                                //img={img} \n                                {...img} //envia cada propiedad de las imagenes como propiedad independiente\n                            />\n                        ))\n                    }\n                </div>    \n        </div>\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from '../helpers/getGif';\n\nexport const useFetchGif = ( category ) =>{\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        /*getGifs(category)\n            .then(imgs => setimages(imgs));*/\n        \n        getGifs(category)\n            .then(imgs => {\n\n                /*setTimeout(() => {\n                    setstate({\n                        data: imgs,\n                        loading: false\n                    })\n                }, 1000);*/\n\n                setstate({\n                    data: imgs,\n                    loading: false\n                });\n            })\n    }, [category]);\n    /************IMPORTANTE: LOS EFECTOS NO PUEDEN SER ASYNC*************/\n\n    return state; //{ data [], loading: true }\n};","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    \n    //const categories = ['My Hero Academia', 'Hunter x Hunter', 'Samurai X', 'Naruto'];\n\n    const [categories, setCategories] = useState(['Batman']);\n\n\n    /*const handleAdd = () =>{\n        \n        setcategories([...categories, 'Naruto']);\n    };*/\n\n    return (\n        <>\n            <main role=\"main\">\n                <div className=\"row\">\n                    <div className=\"col-md-12 col-lg-10 centrado\">\n                        <h2>Gifs Search Engine</h2>\n                        <AddCategory setCategories={setCategories} />\n                        <hr />\n                    </div>\n                </div>       \n\n                {/*<div className=\"container-fluid\">\n                    <div className=\"row\">*/}\n                <div className=\"col-md-12 col-lg-10 centrado\">\n                    { \n                        categories.map( (category) => (\n                            //<li key={category}>{category}</li> no olvidar el key \n                            <GifGrid \n                                key={category}    \n                                category={category}\n                                categories={categories}\n                                setCategories={setCategories}\n                            />\n                        ))\n                    }\n                </div>\n                    {/*</div>\n                </div>*/}\n            </main> \n    </>    \n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}